# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from messages import registry_pb2 as registry__pb2


class RegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListPackages = channel.unary_stream(
                '/api.Registry/ListPackages',
                request_serializer=registry__pb2.ListPackageRequest.SerializeToString,
                response_deserializer=registry__pb2.PackageName.FromString,
                )
        self.GetPackage = channel.unary_unary(
                '/api.Registry/GetPackage',
                request_serializer=registry__pb2.GetPackageRequest.SerializeToString,
                response_deserializer=registry__pb2.Package.FromString,
                )
        self.GetBundle = channel.unary_unary(
                '/api.Registry/GetBundle',
                request_serializer=registry__pb2.GetBundleRequest.SerializeToString,
                response_deserializer=registry__pb2.Bundle.FromString,
                )
        self.GetBundleForChannel = channel.unary_unary(
                '/api.Registry/GetBundleForChannel',
                request_serializer=registry__pb2.GetBundleInChannelRequest.SerializeToString,
                response_deserializer=registry__pb2.Bundle.FromString,
                )
        self.GetChannelEntriesThatReplace = channel.unary_stream(
                '/api.Registry/GetChannelEntriesThatReplace',
                request_serializer=registry__pb2.GetAllReplacementsRequest.SerializeToString,
                response_deserializer=registry__pb2.ChannelEntry.FromString,
                )
        self.GetBundleThatReplaces = channel.unary_unary(
                '/api.Registry/GetBundleThatReplaces',
                request_serializer=registry__pb2.GetReplacementRequest.SerializeToString,
                response_deserializer=registry__pb2.Bundle.FromString,
                )
        self.GetChannelEntriesThatProvide = channel.unary_stream(
                '/api.Registry/GetChannelEntriesThatProvide',
                request_serializer=registry__pb2.GetAllProvidersRequest.SerializeToString,
                response_deserializer=registry__pb2.ChannelEntry.FromString,
                )
        self.GetLatestChannelEntriesThatProvide = channel.unary_stream(
                '/api.Registry/GetLatestChannelEntriesThatProvide',
                request_serializer=registry__pb2.GetLatestProvidersRequest.SerializeToString,
                response_deserializer=registry__pb2.ChannelEntry.FromString,
                )
        self.GetDefaultBundleThatProvides = channel.unary_unary(
                '/api.Registry/GetDefaultBundleThatProvides',
                request_serializer=registry__pb2.GetDefaultProviderRequest.SerializeToString,
                response_deserializer=registry__pb2.Bundle.FromString,
                )
        self.ListBundles = channel.unary_stream(
                '/api.Registry/ListBundles',
                request_serializer=registry__pb2.ListBundlesRequest.SerializeToString,
                response_deserializer=registry__pb2.Bundle.FromString,
                )


class RegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListPackages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPackage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBundle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBundleForChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannelEntriesThatReplace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBundleThatReplaces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannelEntriesThatProvide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatestChannelEntriesThatProvide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDefaultBundleThatProvides(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBundles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListPackages': grpc.unary_stream_rpc_method_handler(
                    servicer.ListPackages,
                    request_deserializer=registry__pb2.ListPackageRequest.FromString,
                    response_serializer=registry__pb2.PackageName.SerializeToString,
            ),
            'GetPackage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPackage,
                    request_deserializer=registry__pb2.GetPackageRequest.FromString,
                    response_serializer=registry__pb2.Package.SerializeToString,
            ),
            'GetBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBundle,
                    request_deserializer=registry__pb2.GetBundleRequest.FromString,
                    response_serializer=registry__pb2.Bundle.SerializeToString,
            ),
            'GetBundleForChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBundleForChannel,
                    request_deserializer=registry__pb2.GetBundleInChannelRequest.FromString,
                    response_serializer=registry__pb2.Bundle.SerializeToString,
            ),
            'GetChannelEntriesThatReplace': grpc.unary_stream_rpc_method_handler(
                    servicer.GetChannelEntriesThatReplace,
                    request_deserializer=registry__pb2.GetAllReplacementsRequest.FromString,
                    response_serializer=registry__pb2.ChannelEntry.SerializeToString,
            ),
            'GetBundleThatReplaces': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBundleThatReplaces,
                    request_deserializer=registry__pb2.GetReplacementRequest.FromString,
                    response_serializer=registry__pb2.Bundle.SerializeToString,
            ),
            'GetChannelEntriesThatProvide': grpc.unary_stream_rpc_method_handler(
                    servicer.GetChannelEntriesThatProvide,
                    request_deserializer=registry__pb2.GetAllProvidersRequest.FromString,
                    response_serializer=registry__pb2.ChannelEntry.SerializeToString,
            ),
            'GetLatestChannelEntriesThatProvide': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLatestChannelEntriesThatProvide,
                    request_deserializer=registry__pb2.GetLatestProvidersRequest.FromString,
                    response_serializer=registry__pb2.ChannelEntry.SerializeToString,
            ),
            'GetDefaultBundleThatProvides': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDefaultBundleThatProvides,
                    request_deserializer=registry__pb2.GetDefaultProviderRequest.FromString,
                    response_serializer=registry__pb2.Bundle.SerializeToString,
            ),
            'ListBundles': grpc.unary_stream_rpc_method_handler(
                    servicer.ListBundles,
                    request_deserializer=registry__pb2.ListBundlesRequest.FromString,
                    response_serializer=registry__pb2.Bundle.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.Registry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Registry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListPackages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.Registry/ListPackages',
            registry__pb2.ListPackageRequest.SerializeToString,
            registry__pb2.PackageName.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPackage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.Registry/GetPackage',
            registry__pb2.GetPackageRequest.SerializeToString,
            registry__pb2.Package.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.Registry/GetBundle',
            registry__pb2.GetBundleRequest.SerializeToString,
            registry__pb2.Bundle.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBundleForChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.Registry/GetBundleForChannel',
            registry__pb2.GetBundleInChannelRequest.SerializeToString,
            registry__pb2.Bundle.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChannelEntriesThatReplace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.Registry/GetChannelEntriesThatReplace',
            registry__pb2.GetAllReplacementsRequest.SerializeToString,
            registry__pb2.ChannelEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBundleThatReplaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.Registry/GetBundleThatReplaces',
            registry__pb2.GetReplacementRequest.SerializeToString,
            registry__pb2.Bundle.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChannelEntriesThatProvide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.Registry/GetChannelEntriesThatProvide',
            registry__pb2.GetAllProvidersRequest.SerializeToString,
            registry__pb2.ChannelEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLatestChannelEntriesThatProvide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.Registry/GetLatestChannelEntriesThatProvide',
            registry__pb2.GetLatestProvidersRequest.SerializeToString,
            registry__pb2.ChannelEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDefaultBundleThatProvides(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.Registry/GetDefaultBundleThatProvides',
            registry__pb2.GetDefaultProviderRequest.SerializeToString,
            registry__pb2.Bundle.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBundles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.Registry/ListBundles',
            registry__pb2.ListBundlesRequest.SerializeToString,
            registry__pb2.Bundle.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
